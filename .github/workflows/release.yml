name: Release

on:
  push:
    tags: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

    - name: Install npm modules
      run: npm install

    - name: Create Artifacts
      run: npm run tauri build

    - name: Create Archive (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        RUST_TARGET=`rustup show active-toolchain | sed -e 's/[^-]*-\(.*\)\s.*/\1/'`

        mkdir artifacts

        CUR_DIR=$(pwd)
        LIB_DIR='./target/release'
        pushd "$LIB_DIR"
        FILES=$(find . -maxdepth 1 -type f \( -name '*.so' -o -name '*.a' -o -executable \))
        if [[ -n $FILES ]] ; then
            tar -zcf "${CUR_DIR}/artifacts/${RUST_TARGET}.tar.gz" $FILES
        fi
        popd

        echo "RUST_TARGET=${RUST_TARGET}" >> $GITHUB_ENV
      working-directory: ./src-tauri

    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $RUST_TARGET = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'

        New-Item -Type Directory artifacts

        $TARGETS = @(
          'target\release\*.exe',
          'target\release\*.dll',
          'target\release\*.exp',
          'target\release\*.lib'
        )
        $LIBS = @(Get-Item -Path $TARGETS)
        if ($LIBS.Length -gt 0) {
            Compress-Archive -Path $LIBS -DestinationPath ".\artifacts\${RUST_TARGET}.zip"
        }

        Write-Output "RUST_TARGET=$RUST_TARGET" >> $env:GITHUB_ENV
      working-directory: ./src-tauri

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RUST_TARGET }}
        path: src-tauri/artifacts/
        retention-days: 1

  release:

    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh config set prompt disabled
        gh release create ${GITHUB_REF_NAME} ./artifacts/*/*  -t v${GITHUB_REF_NAME} -d
